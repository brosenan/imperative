'/bootstrap':signature(execute(Command,Input,Output)::'/bootstrap':pred,[Command::command,Input::'/bootstrap':list('/bootstrap':typedTerm),Output::'/bootstrap':list('/bootstrap':typedTerm)]).
'/bootstrap':projection(execute(Command,Input,Output)::'/bootstrap':pred,'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':label(!execute),'/bootstrap':vis(Command::command)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Input::'/bootstrap':list('/bootstrap':typedTerm)),'/bootstrap':symbol(8594),'/bootstrap':vis(Output::'/bootstrap':list('/bootstrap':typedTerm))])])).
'/util':behavior(execute(Command,Input,Output)::'/bootstrap':pred,!'executes Command, providing it Input, getting Output', (execute(block([read(X,'/bootstrap':number),read(Y,'/bootstrap':number),print(op(var(X),'/Functional':numPlus,var(Y)),'/bootstrap':number)]),[2::'/bootstrap':number,3::'/bootstrap':number],[Five::'/bootstrap':number]),'/util':assertEqual(Five,5,'/bootstrap':number))).
execute(Cmd,In,Out):-initialState(Sigma),exec(Cmd,Sigma,_,In,[],[],Out).
