'/bootstrap':signature(assign(Key,Expr,Type)::command,[Key::variable(Type),Expr::expr(Type),Type::'/bootstrap':type]).
'/bootstrap':projection(assign(Key,Expr,Type)::command,'/bootstrap':horiz(['/bootstrap':vis(Key::variable(Type)),'/bootstrap':label(! (=)),'/bootstrap':vis(Expr::expr(Type)),'/bootstrap':label(! (::)),'/bootstrap':vis(Type::'/bootstrap':type)])).
'/util':behavior(assign(Key,Expr,Type)::command,!'should assign the value of Expr to Key', (initialState(Sigma1),exec(assign(foo,op(const(1),'/Functional':numPlus,const(2)),'/bootstrap':number),Sigma1,Sigma2,[],InOut,[],OutOut),getState(Sigma2,foo,Three,'/bootstrap':number),'/util':assertEqual(Three,3,'/bootstrap':number),'/util':assertEqual(InOut,[],'/bootstrap':list('/bootstrap':typedTerm)),'/util':assertEqual(OutOut,[],'/bootstrap':list('/bootstrap':typedTerm)))).
annotation:shrink((exec(assign(Key,Expr,Type),Sigma1,Sigma2,In,In,Out,Out):-eval(Expr,Sigma1,Type,Value),changeState(Sigma1,Key,Value,Type,Sigma2))).
